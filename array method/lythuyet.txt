10 METHOD hay được sử dụng nhất

1. push(), pop(), shift(), unshift()
    *push(): Thêm phần tử vào cuối mảng
    *unshift(): Thêm phần tử vào đầu mảng
    *shift(): Xóa phần tử đầu tiên trong mảng
    *pop(): Xóa phần tử cuối cùng trong mảng

    VD:
    let arr = [];

    arr.push(1); // arr = [1]
    arr.unshift(2); // arr = [2,1]
    arr.pop(); // arr = [1]
    arr.shift(); // arr = []

2. every(): 

Method này sẽ có tham số là 1 hàm (ta tạm gọi là testMethod). 
hàm testMethod sẽ có cấu trúc như sau function(el, index, arr) 
và luôn trả về giá trị true/false. 

    el: giá trị của phần tử hiện tại.
    index: vị trí của phần tử hiện tại trong mảng.
    arr: mảng chứa phần tử hiện tại.
Method every() sẽ kiểm tra xem toàn bộ phần tử trong mảng có thỏa mãn testMethod không.

Ví dụ:

const arr = [2,4,6,8,10];
arr.every(el => el % 2 == 0); // true

const arr = [2,1,6,8,10];
arr.every(el => el % 2 == 0); // false
testMethod ở đây chính là hàm kiểm tra xem phần tử có phải số chẵn hay không.
Vậy thì ví dụ 1 là true vì toàn bộ mảng là số chẵn, còn ví dụ 2 là false vì có phần tử 1 là số lẻ.

3. some()

Tương tự, method này cũng nhận vào một tham số là testMethod.
Method này sẽ trả về true nếu như có ít nhất 1 phần tử trong mảng thỏa mãn testMethod,
nếu không sẽ trả về false.

Ví dụ:

const arr = [1, 3, 5, 7, 2];
arr.some(el => el % 2 == 0); // true

const arr = [1, 3, 5, 7, 9];
arr.some(el => el % 2 == 0); // false

Ví dụ 1 có phần tử 2 thỏa mãn, còn ở ví dụ 2 thì không có phần tử nào cả.

4. map()

Method này sẽ nhận vào tham số là 1 testMethod.tuy nhiên testMethod này không nhất 
thiết phải trả về giá trị true/false. Method này sẽ trả về 1 mảng mới, với giá trị được
trả về từ testMethod của từng phần tử.

VD: ta muốn bình phương tất cả phần tử trong mảng

const arr = [1,2,3,4,5];
arr.map(el => el*el);

6. reduce()

Đây là method dùng để tính toán từ các phần tử của mảng (theo thứ tự từ trái sang phải).

Method này sẽ nhận vào 2 tham số:

    *function(total, el): Là một hàm tính toán, total chính là kết quả phép
    tính của phần tử trước còn el chính là phần tử hiện tại.
    *initVaule: Giá trị ban đầu của phép tính, được sử dụng 
    làm total cho phép tính của phần tử đầu tiên.

Ví dụ, ta có thể tính tổng toàn bộ phần tử trong mảng bằng cách sau:

const arr = [1, 3, 5, 9];
arr.reduce((total, el) => total + el, 0); // 18

7. splice()

Method này sử dụng để xóa các phần tử trong mảng 
và sẽ trả về các phần tử đã xóa. Method này nhận vào hai tham số:

    index: vị trí của phần tử đầu tiên muốn xóa.
    deleteCount: số phần tử muốn xóa từ vị trí index.
const arr = [1, 3, 5, 9];
const remove = arr.splice(0, 2);
// arr = [5, 9]
// remove = [1, 3]

8. slice()

Method này tương tự với hàm substring() chỉ khác là sử dụng với mảng.
Method này nhận 2 tham số:

    start: vị trí của phần tử đầu tiên.
    end: vị trí của phần tử cuối cùng, nếu bạn không truyền 
    vào thì mặc định sẽ là độ lớn của mảng.
Method này sẽ trả về mảng con từ vị trí start đến vị trí end - 1 của mảng.
Ví dụ:

const arr = [1, 3, 5, 9];
const subArray = arr.slice(0, 2); // [1, 3]

9. filter()
Method này nhận vào tham số là một testMethod 
và sẽ trả về mảng chứa các giá trị thỏa mãn testMethod.

Ví dụ:

const arr = [1, 2, 3, 4, 5, 6, 7, 8]
const filter = arr.filter(el => el % 2 == 0); // [2, 4 ,6 ,8]

10.includes()

Method này nhận vào 1 tham số là el và sẽ trả về true 
nếu mảng có chứa phần tử el, ngược lại sẽ trả về false.

Ví dụ:

const arr = [1, 2, 3, 4, 5, 6, 7, 8]
arr.includes(1) // true

const arr = [1, 2, 3, 4, 5, 6, 7, 8]
arr.includes(10) // false

11. findIndex()

Phương thức findIndex() này nhận một hàm làm tham số và sẽ áp dụng nó
cho mảng
Nó trả về chỉ mục của một phần tử được tìm thấy và thỏa mãn hàm kiểm tra 
được truyền dưới dạng đối số hoặc trả về -1 nếu không thỏa mãn nó.

VD:
    const myAwesomeArray = [
    { id: 1, name: "Hải" },
    { id: 2, name: "Doanh" },
    { id: 3, name: "Việt" },
    ]

    myAwesomeArray.findIndex(element => element.id === 3)
    //-------> Kết quả : 2

    myAwesomeArray.findIndex(element => element.id === 7)
    //-------> Kết quả : -1
